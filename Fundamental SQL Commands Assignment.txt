###Exercises

> List the commands for adding, updating, and deleting data.

A: 

```
INSERT INTO tablenamehere VALUES (value);


UPDATE tablenamehere SET columnname=newvalue WHERE columnname=value;


DELETE FROM tablenamehere WHERE columnname=value;
```

> Explain the structure for each type of command.

A:

Insert into a specified table (and optionally into specified columns, which it looks like you pass in as Javascript-style arguments) specified values (in the correct data type and positon).
Update the specified table by setting the specifed value in a specific column where a condition (or conditions) is true (where id or other column equals a specified value). 
Delete something from a specified table when a condition, noted by the WHERE clause, is true. 

> What are some of the data types that can be used in tables? Give a real-world example of each type.

A: Tables on students would have a number of them. Student ID#s as integers; enrollment status as boolean; major, name, etc. as text; date of birth as a date; tuition owed as money). 

> Decide how to create a new table to hold a list of people invited to a wedding dinner. The table needs to have first and last names, whether they sent in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

> Which data type would you use to store each of the following pieces of information?
* First and last name.
* Whether they sent in their RSVP.
* Number of guests.
* Number of meals.

A: Text, Boolean, Smallint, Numeric

> Write a command that creates the table to track the wedding dinner.

```
CREATE TABLE weddingdinner (
  name text,
  rsvp boolean,
  guests smallint,
  meals numeric
);
```

> Write a command that adds a column to track whether the guest sent a thank you card.

```
ALTER TABLE weddingdinner ADD COLUMN thankyou boolean;
```

> You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.

```
ALTER TABLE weddingdinner DROP COLUMN meals;
```

> The guests will need a place to sit at the reception, so write a command that adds a column for table number.

```
ALTER TABLE weddingdinner ADD COLUMN tablenumber smallint;
```

> The wedding is over and we do not need to keep this information, so write a command that deletes the table numbers from the database.

```
ALTER TABLE weddingdinner DROP COLUMN tablenumber;
```

> Write a command to create a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.

```
CREATE TABLE librarybooks (
  isbn integer,
  title text,
  author text,
  genre text,
  publishingdate date,
  copies smallint,
  available smallint
);
```

> Find three books and add their information to the table.

```
INSERT INTO librarybooks (isbn, title, author, genre, publishingdate, copies, available)
  VALUES
  (9780590353403, 'Harry Potter And The Sorcerers Stone', 'J.K. Rowling', 'Young Adult', '1998-10-01', 9, 7),
  (9780553593716, 'A Game of Thrones', 'George R. R. Martin', 'Fantasy', '1996-08-01', 6, 4),
  (9780765376671, 'The Way of Kings', 'Brandon Sanderson', 'Fantasy', '2010-08-01', 2, 2);
  
```

> Someone has just checked out one of the books. Change the number of available copies to 1 fewer.

```
UPDATE librarybooks SET available=available-1 WHERE isbn=9780590353403;
```

> Now one of the books has been added to the banned books list. Remove it from the table.

```
DELETE FROM librarybooks WHERE isbn=9780553593716;
```

> Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, orbiting body, if it is currently operating, and its approximate miles from Earth. In addition to the table creation, provide commands that perform the following operations:

```
CREATE TABLE spacecrafts (
  id integer,
  name text,
  yearlaunched smallint,
  origincountry text,
  missiondescription text,
  orbitingbody text,
  currentlyoperating boolean,
  milesfromearth numeric
);
```

> Add three non-Earth-orbiting satellites to the table.

```
INSERT INTO spacecrafts (id, name, yearlaunched, origincountry, missiondescription, orbitingbody, currentlyoperating, milesfromearth)
  VALUES
 (00732, 'Enterprise', 1960, 'USA', 'To boldly go where no one has gone before!', 'Vulcan', TRUE, 450000),
 (82384, 'Cats in Space', 2000, 'Russia', 'Collect data', 'Moon', TRUE, 238000),
 (83487, 'Harry Potter and the Sorcerers Spaceship', 1999, 'Britain', 'Stop Voldemort', 'Mars', TRUE, 33900000);
```

> Remove one of the satellites from the table since it has just crashed into the planet.

```
DELETE FROM spacecrafts WHERE id=83487;
```

> Edit another satellite because it is no longer operating and change the value to reflect that.

```
UPDATE spacecrafts SET currentlyoperating=FALSE WHERE id=82384;
```

> Write a command to create a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, the body of the email, the timestamp, whether or not you have read the email, and the id of the email chain it's in. Also provide commands that perform the following operations:

```
CREATE TABLE emails (
  id integer,
  subject text,
  sender text,
  otherrecipients text,
  body text,
  timesent timestamp,
  isread boolean,
  chainid integer
);
```

> Add three new emails to the inbox.

```
INSERT INTO emails (id, subject, sender, otherrecipients, body, timesent, isread, chainid)
  VALUES
 (834, 'Feed Me', 'The Cat', null, 'I need food now', '2019-08-09 05:30:00', TRUE, 382),
 (835, 'I Still Haven''t Been Fed', 'The Cat', null, 'I am literally starving', '2019-08-09 05:32:00', TRUE, 382),
 (836, 'This is getting ridiculous', 'The Cat', 'Other Human', 'Get out of bed right now and feed me. Meow.', '2019-08-09 05:32:30', FALSE, 382);
```

> You deleted one of the emails, so write a command to remove the row from the inbox table.

```
DELETE FROM emails WHERE id=834;
```

> You started reading an email but just heard a crash in another room. Mark the email as unread before investigating the crash, so you can come back and read it later.

```
UPDATE emails SET isread=FALSE WHERE id=835;
```